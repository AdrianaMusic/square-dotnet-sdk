using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Square;
using Square.Utilities;

namespace Square.Models
{
    public class PaymentRefund 
    {
        public PaymentRefund(string id,
            Models.Money amountMoney,
            string status = null,
            string locationId = null,
            Models.Money appFeeMoney = null,
            IList<Models.ProcessingFee> processingFee = null,
            string paymentId = null,
            string orderId = null,
            string reason = null,
            string createdAt = null,
            string updatedAt = null)
        {
            Id = id;
            Status = status;
            LocationId = locationId;
            AmountMoney = amountMoney;
            AppFeeMoney = appFeeMoney;
            ProcessingFee = processingFee;
            PaymentId = paymentId;
            OrderId = orderId;
            Reason = reason;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
        }

        /// <summary>
        /// The unique ID for this refund, generated by Square.
        /// </summary>
        [JsonProperty("id")]
        public string Id { get; }

        /// <summary>
        /// The refund's status:
        /// - `PENDING` - Awaiting approval.
        /// - `COMPLETED` - Successfully completed.
        /// - `REJECTED` - The refund was rejected.
        /// - `FAILED` - An error occurred.
        /// </summary>
        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public string Status { get; }

        /// <summary>
        /// The location ID associated with the payment this refund is attached to.
        /// </summary>
        [JsonProperty("location_id", NullValueHandling = NullValueHandling.Ignore)]
        public string LocationId { get; }

        /// <summary>
        /// Represents an amount of money. `Money` fields can be signed or unsigned.
        /// Fields that do not explicitly define whether they are signed or unsigned are
        /// considered unsigned and can only hold positive amounts. For signed fields, the
        /// sign of the value indicates the purpose of the money transfer. See
        /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
        /// for more information.
        /// </summary>
        [JsonProperty("amount_money")]
        public Models.Money AmountMoney { get; }

        /// <summary>
        /// Represents an amount of money. `Money` fields can be signed or unsigned.
        /// Fields that do not explicitly define whether they are signed or unsigned are
        /// considered unsigned and can only hold positive amounts. For signed fields, the
        /// sign of the value indicates the purpose of the money transfer. See
        /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
        /// for more information.
        /// </summary>
        [JsonProperty("app_fee_money", NullValueHandling = NullValueHandling.Ignore)]
        public Models.Money AppFeeMoney { get; }

        /// <summary>
        /// Processing fees and fee adjustments assessed by Square for this refund.
        /// </summary>
        [JsonProperty("processing_fee", NullValueHandling = NullValueHandling.Ignore)]
        public IList<Models.ProcessingFee> ProcessingFee { get; }

        /// <summary>
        /// The ID of the payment assocated with this refund.
        /// </summary>
        [JsonProperty("payment_id", NullValueHandling = NullValueHandling.Ignore)]
        public string PaymentId { get; }

        /// <summary>
        /// The ID of the order associated with the refund.
        /// </summary>
        [JsonProperty("order_id", NullValueHandling = NullValueHandling.Ignore)]
        public string OrderId { get; }

        /// <summary>
        /// The reason for the refund.
        /// </summary>
        [JsonProperty("reason", NullValueHandling = NullValueHandling.Ignore)]
        public string Reason { get; }

        /// <summary>
        /// The timestamp of when the refund was created, in RFC 3339 format.
        /// </summary>
        [JsonProperty("created_at", NullValueHandling = NullValueHandling.Ignore)]
        public string CreatedAt { get; }

        /// <summary>
        /// The timestamp of when the refund was last updated, in RFC 3339 format.
        /// </summary>
        [JsonProperty("updated_at", NullValueHandling = NullValueHandling.Ignore)]
        public string UpdatedAt { get; }

        public Builder ToBuilder()
        {
            var builder = new Builder(Id,
                AmountMoney)
                .Status(Status)
                .LocationId(LocationId)
                .AppFeeMoney(AppFeeMoney)
                .ProcessingFee(ProcessingFee)
                .PaymentId(PaymentId)
                .OrderId(OrderId)
                .Reason(Reason)
                .CreatedAt(CreatedAt)
                .UpdatedAt(UpdatedAt);
            return builder;
        }

        public class Builder
        {
            private string id;
            private Models.Money amountMoney;
            private string status;
            private string locationId;
            private Models.Money appFeeMoney;
            private IList<Models.ProcessingFee> processingFee;
            private string paymentId;
            private string orderId;
            private string reason;
            private string createdAt;
            private string updatedAt;

            public Builder(string id,
                Models.Money amountMoney)
            {
                this.id = id;
                this.amountMoney = amountMoney;
            }

            public Builder Id(string id)
            {
                this.id = id;
                return this;
            }

            public Builder AmountMoney(Models.Money amountMoney)
            {
                this.amountMoney = amountMoney;
                return this;
            }

            public Builder Status(string status)
            {
                this.status = status;
                return this;
            }

            public Builder LocationId(string locationId)
            {
                this.locationId = locationId;
                return this;
            }

            public Builder AppFeeMoney(Models.Money appFeeMoney)
            {
                this.appFeeMoney = appFeeMoney;
                return this;
            }

            public Builder ProcessingFee(IList<Models.ProcessingFee> processingFee)
            {
                this.processingFee = processingFee;
                return this;
            }

            public Builder PaymentId(string paymentId)
            {
                this.paymentId = paymentId;
                return this;
            }

            public Builder OrderId(string orderId)
            {
                this.orderId = orderId;
                return this;
            }

            public Builder Reason(string reason)
            {
                this.reason = reason;
                return this;
            }

            public Builder CreatedAt(string createdAt)
            {
                this.createdAt = createdAt;
                return this;
            }

            public Builder UpdatedAt(string updatedAt)
            {
                this.updatedAt = updatedAt;
                return this;
            }

            public PaymentRefund Build()
            {
                return new PaymentRefund(id,
                    amountMoney,
                    status,
                    locationId,
                    appFeeMoney,
                    processingFee,
                    paymentId,
                    orderId,
                    reason,
                    createdAt,
                    updatedAt);
            }
        }
    }
}