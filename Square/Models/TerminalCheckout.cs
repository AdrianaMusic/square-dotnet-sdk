
using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Square;
using Square.Utilities;

namespace Square.Models
{
    public class TerminalCheckout 
    {
        public TerminalCheckout(Models.Money amountMoney,
            Models.DeviceCheckoutOptions deviceOptions,
            string id = null,
            string referenceId = null,
            string note = null,
            string deadlineDuration = null,
            string status = null,
            string cancelReason = null,
            IList<string> paymentIds = null,
            string createdAt = null,
            string updatedAt = null)
        {
            Id = id;
            AmountMoney = amountMoney;
            ReferenceId = referenceId;
            Note = note;
            DeviceOptions = deviceOptions;
            DeadlineDuration = deadlineDuration;
            Status = status;
            CancelReason = cancelReason;
            PaymentIds = paymentIds;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
        }

        /// <summary>
        /// A unique ID for this `TerminalCheckout`
        /// </summary>
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; }

        /// <summary>
        /// Represents an amount of money. `Money` fields can be signed or unsigned.
        /// Fields that do not explicitly define whether they are signed or unsigned are
        /// considered unsigned and can only hold positive amounts. For signed fields, the
        /// sign of the value indicates the purpose of the money transfer. See
        /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
        /// for more information.
        /// </summary>
        [JsonProperty("amount_money")]
        public Models.Money AmountMoney { get; }

        /// <summary>
        /// An optional user-defined reference ID which can be used to associate
        /// this `TerminalCheckout` to another entity in an external system. For example, an order
        /// ID generated by a third-party shopping cart. Will also be associated with any payments
        /// used to complete the checkout.
        /// </summary>
        [JsonProperty("reference_id", NullValueHandling = NullValueHandling.Ignore)]
        public string ReferenceId { get; }

        /// <summary>
        /// An optional note to associate with the checkout, as well any payments used to complete the checkout.
        /// </summary>
        [JsonProperty("note", NullValueHandling = NullValueHandling.Ignore)]
        public string Note { get; }

        /// <summary>
        /// Getter for device_options
        /// </summary>
        [JsonProperty("device_options")]
        public Models.DeviceCheckoutOptions DeviceOptions { get; }

        /// <summary>
        /// The duration as an RFC 3339 duration, after which the checkout will be automatically canceled.
        /// TerminalCheckouts that are `PENDING` will be automatically `CANCELED` and have a cancellation reason
        /// of `TIMED_OUT`.
        /// Default: 5 minutes from creation
        /// Maximum: 5 minutes
        /// </summary>
        [JsonProperty("deadline_duration", NullValueHandling = NullValueHandling.Ignore)]
        public string DeadlineDuration { get; }

        /// <summary>
        /// The status of the `TerminalCheckout`.
        /// Options: `PENDING`, `IN_PROGRESS`, `CANCEL_REQUESTED`, `CANCELED`, `COMPLETED`
        /// </summary>
        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public string Status { get; }

        /// <summary>
        /// Getter for cancel_reason
        /// </summary>
        [JsonProperty("cancel_reason", NullValueHandling = NullValueHandling.Ignore)]
        public string CancelReason { get; }

        /// <summary>
        /// A list of ids for payments created by this `TerminalCheckout`.
        /// </summary>
        [JsonProperty("payment_ids", NullValueHandling = NullValueHandling.Ignore)]
        public IList<string> PaymentIds { get; }

        /// <summary>
        /// The time when the `TerminalCheckout` was created as an RFC 3339 timestamp.
        /// </summary>
        [JsonProperty("created_at", NullValueHandling = NullValueHandling.Ignore)]
        public string CreatedAt { get; }

        /// <summary>
        /// The time when the `TerminalCheckout` was last updated as an RFC 3339 timestamp.
        /// </summary>
        [JsonProperty("updated_at", NullValueHandling = NullValueHandling.Ignore)]
        public string UpdatedAt { get; }

        public override string ToString()
        {
            var toStringOutput = new List<string>();

            this.ToString(toStringOutput);

            return $"TerminalCheckout : ({string.Join(", ", toStringOutput)})";
        }

        protected void ToString(List<string> toStringOutput)
        {
            toStringOutput.Add($"Id = {(Id == null ? "null" : Id == string.Empty ? "" : Id)}");
            toStringOutput.Add($"AmountMoney = {(AmountMoney == null ? "null" : AmountMoney.ToString())}");
            toStringOutput.Add($"ReferenceId = {(ReferenceId == null ? "null" : ReferenceId == string.Empty ? "" : ReferenceId)}");
            toStringOutput.Add($"Note = {(Note == null ? "null" : Note == string.Empty ? "" : Note)}");
            toStringOutput.Add($"DeviceOptions = {(DeviceOptions == null ? "null" : DeviceOptions.ToString())}");
            toStringOutput.Add($"DeadlineDuration = {(DeadlineDuration == null ? "null" : DeadlineDuration == string.Empty ? "" : DeadlineDuration)}");
            toStringOutput.Add($"Status = {(Status == null ? "null" : Status == string.Empty ? "" : Status)}");
            toStringOutput.Add($"CancelReason = {(CancelReason == null ? "null" : CancelReason.ToString())}");
            toStringOutput.Add($"PaymentIds = {(PaymentIds == null ? "null" : $"[{ string.Join(", ", PaymentIds)} ]")}");
            toStringOutput.Add($"CreatedAt = {(CreatedAt == null ? "null" : CreatedAt == string.Empty ? "" : CreatedAt)}");
            toStringOutput.Add($"UpdatedAt = {(UpdatedAt == null ? "null" : UpdatedAt == string.Empty ? "" : UpdatedAt)}");
        }

        public override bool Equals(object obj)
        {
            if (obj == null)
            {
                return false;
            }

            if (obj == this)
            {
                return true;
            }

            return obj is TerminalCheckout other &&
                ((Id == null && other.Id == null) || (Id?.Equals(other.Id) == true)) &&
                ((AmountMoney == null && other.AmountMoney == null) || (AmountMoney?.Equals(other.AmountMoney) == true)) &&
                ((ReferenceId == null && other.ReferenceId == null) || (ReferenceId?.Equals(other.ReferenceId) == true)) &&
                ((Note == null && other.Note == null) || (Note?.Equals(other.Note) == true)) &&
                ((DeviceOptions == null && other.DeviceOptions == null) || (DeviceOptions?.Equals(other.DeviceOptions) == true)) &&
                ((DeadlineDuration == null && other.DeadlineDuration == null) || (DeadlineDuration?.Equals(other.DeadlineDuration) == true)) &&
                ((Status == null && other.Status == null) || (Status?.Equals(other.Status) == true)) &&
                ((CancelReason == null && other.CancelReason == null) || (CancelReason?.Equals(other.CancelReason) == true)) &&
                ((PaymentIds == null && other.PaymentIds == null) || (PaymentIds?.Equals(other.PaymentIds) == true)) &&
                ((CreatedAt == null && other.CreatedAt == null) || (CreatedAt?.Equals(other.CreatedAt) == true)) &&
                ((UpdatedAt == null && other.UpdatedAt == null) || (UpdatedAt?.Equals(other.UpdatedAt) == true));
        }

        public override int GetHashCode()
        {
            int hashCode = -1408597552;

            if (Id != null)
            {
               hashCode += Id.GetHashCode();
            }

            if (AmountMoney != null)
            {
               hashCode += AmountMoney.GetHashCode();
            }

            if (ReferenceId != null)
            {
               hashCode += ReferenceId.GetHashCode();
            }

            if (Note != null)
            {
               hashCode += Note.GetHashCode();
            }

            if (DeviceOptions != null)
            {
               hashCode += DeviceOptions.GetHashCode();
            }

            if (DeadlineDuration != null)
            {
               hashCode += DeadlineDuration.GetHashCode();
            }

            if (Status != null)
            {
               hashCode += Status.GetHashCode();
            }

            if (CancelReason != null)
            {
               hashCode += CancelReason.GetHashCode();
            }

            if (PaymentIds != null)
            {
               hashCode += PaymentIds.GetHashCode();
            }

            if (CreatedAt != null)
            {
               hashCode += CreatedAt.GetHashCode();
            }

            if (UpdatedAt != null)
            {
               hashCode += UpdatedAt.GetHashCode();
            }

            return hashCode;
        }

        public Builder ToBuilder()
        {
            var builder = new Builder(AmountMoney,
                DeviceOptions)
                .Id(Id)
                .ReferenceId(ReferenceId)
                .Note(Note)
                .DeadlineDuration(DeadlineDuration)
                .Status(Status)
                .CancelReason(CancelReason)
                .PaymentIds(PaymentIds)
                .CreatedAt(CreatedAt)
                .UpdatedAt(UpdatedAt);
            return builder;
        }

        public class Builder
        {
            private Models.Money amountMoney;
            private Models.DeviceCheckoutOptions deviceOptions;
            private string id;
            private string referenceId;
            private string note;
            private string deadlineDuration;
            private string status;
            private string cancelReason;
            private IList<string> paymentIds;
            private string createdAt;
            private string updatedAt;

            public Builder(Models.Money amountMoney,
                Models.DeviceCheckoutOptions deviceOptions)
            {
                this.amountMoney = amountMoney;
                this.deviceOptions = deviceOptions;
            }

            public Builder AmountMoney(Models.Money amountMoney)
            {
                this.amountMoney = amountMoney;
                return this;
            }

            public Builder DeviceOptions(Models.DeviceCheckoutOptions deviceOptions)
            {
                this.deviceOptions = deviceOptions;
                return this;
            }

            public Builder Id(string id)
            {
                this.id = id;
                return this;
            }

            public Builder ReferenceId(string referenceId)
            {
                this.referenceId = referenceId;
                return this;
            }

            public Builder Note(string note)
            {
                this.note = note;
                return this;
            }

            public Builder DeadlineDuration(string deadlineDuration)
            {
                this.deadlineDuration = deadlineDuration;
                return this;
            }

            public Builder Status(string status)
            {
                this.status = status;
                return this;
            }

            public Builder CancelReason(string cancelReason)
            {
                this.cancelReason = cancelReason;
                return this;
            }

            public Builder PaymentIds(IList<string> paymentIds)
            {
                this.paymentIds = paymentIds;
                return this;
            }

            public Builder CreatedAt(string createdAt)
            {
                this.createdAt = createdAt;
                return this;
            }

            public Builder UpdatedAt(string updatedAt)
            {
                this.updatedAt = updatedAt;
                return this;
            }

            public TerminalCheckout Build()
            {
                return new TerminalCheckout(amountMoney,
                    deviceOptions,
                    id,
                    referenceId,
                    note,
                    deadlineDuration,
                    status,
                    cancelReason,
                    paymentIds,
                    createdAt,
                    updatedAt);
            }
        }
    }
}