using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Square;
using Square.Utilities;

namespace Square.Models
{
    public class InventoryAdjustment 
    {
        public InventoryAdjustment(string id = null,
            string referenceId = null,
            string fromState = null,
            string toState = null,
            string locationId = null,
            string catalogObjectId = null,
            string catalogObjectType = null,
            string quantity = null,
            Models.Money totalPriceMoney = null,
            string occurredAt = null,
            string createdAt = null,
            Models.SourceApplication source = null,
            string employeeId = null,
            string transactionId = null,
            string refundId = null,
            string purchaseOrderId = null,
            string goodsReceiptId = null)
        {
            Id = id;
            ReferenceId = referenceId;
            FromState = fromState;
            ToState = toState;
            LocationId = locationId;
            CatalogObjectId = catalogObjectId;
            CatalogObjectType = catalogObjectType;
            Quantity = quantity;
            TotalPriceMoney = totalPriceMoney;
            OccurredAt = occurredAt;
            CreatedAt = createdAt;
            Source = source;
            EmployeeId = employeeId;
            TransactionId = transactionId;
            RefundId = refundId;
            PurchaseOrderId = purchaseOrderId;
            GoodsReceiptId = goodsReceiptId;
        }

        /// <summary>
        /// A unique ID generated by Square for the
        /// `InventoryAdjustment`.
        /// </summary>
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; }

        /// <summary>
        /// An optional ID provided by the application to tie the
        /// `InventoryAdjustment` to an external
        /// system.
        /// </summary>
        [JsonProperty("reference_id", NullValueHandling = NullValueHandling.Ignore)]
        public string ReferenceId { get; }

        /// <summary>
        /// Indicates the state of a tracked item quantity in the lifecycle of goods.
        /// </summary>
        [JsonProperty("from_state", NullValueHandling = NullValueHandling.Ignore)]
        public string FromState { get; }

        /// <summary>
        /// Indicates the state of a tracked item quantity in the lifecycle of goods.
        /// </summary>
        [JsonProperty("to_state", NullValueHandling = NullValueHandling.Ignore)]
        public string ToState { get; }

        /// <summary>
        /// The Square ID of the [Location](#type-location) where the related
        /// quantity of items are being tracked.
        /// </summary>
        [JsonProperty("location_id", NullValueHandling = NullValueHandling.Ignore)]
        public string LocationId { get; }

        /// <summary>
        /// The Square generated ID of the
        /// `CatalogObject` being tracked.
        /// </summary>
        [JsonProperty("catalog_object_id", NullValueHandling = NullValueHandling.Ignore)]
        public string CatalogObjectId { get; }

        /// <summary>
        /// The `CatalogObjectType` of the
        /// `CatalogObject` being tracked. Tracking is only
        /// supported for the `ITEM_VARIATION` type.
        /// </summary>
        [JsonProperty("catalog_object_type", NullValueHandling = NullValueHandling.Ignore)]
        public string CatalogObjectType { get; }

        /// <summary>
        /// The number of items affected by the adjustment as a decimal string.
        /// Can support up to 5 digits after the decimal point.
        /// </summary>
        [JsonProperty("quantity", NullValueHandling = NullValueHandling.Ignore)]
        public string Quantity { get; }

        /// <summary>
        /// Represents an amount of money. `Money` fields can be signed or unsigned.
        /// Fields that do not explicitly define whether they are signed or unsigned are
        /// considered unsigned and can only hold positive amounts. For signed fields, the
        /// sign of the value indicates the purpose of the money transfer. See
        /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
        /// for more information.
        /// </summary>
        [JsonProperty("total_price_money", NullValueHandling = NullValueHandling.Ignore)]
        public Models.Money TotalPriceMoney { get; }

        /// <summary>
        /// A client-generated timestamp in RFC 3339 format that indicates when
        /// the adjustment took place. For write actions, the `occurred_at`
        /// timestamp cannot be older than 24 hours or in the future relative to the
        /// time of the request.
        /// </summary>
        [JsonProperty("occurred_at", NullValueHandling = NullValueHandling.Ignore)]
        public string OccurredAt { get; }

        /// <summary>
        /// A read-only timestamp in RFC 3339 format that indicates when Square
        /// received the adjustment.
        /// </summary>
        [JsonProperty("created_at", NullValueHandling = NullValueHandling.Ignore)]
        public string CreatedAt { get; }

        /// <summary>
        /// Provides information about the application used to generate a change.
        /// </summary>
        [JsonProperty("source", NullValueHandling = NullValueHandling.Ignore)]
        public Models.SourceApplication Source { get; }

        /// <summary>
        /// The Square ID of the [Employee](#type-employee) responsible for the
        /// inventory adjustment.
        /// </summary>
        [JsonProperty("employee_id", NullValueHandling = NullValueHandling.Ignore)]
        public string EmployeeId { get; }

        /// <summary>
        /// The read-only Square ID of the [Transaction][#type-transaction] that
        /// caused the adjustment. Only relevant for payment-related state
        /// transitions.
        /// </summary>
        [JsonProperty("transaction_id", NullValueHandling = NullValueHandling.Ignore)]
        public string TransactionId { get; }

        /// <summary>
        /// The read-only Square ID of the [Refund][#type-refund] that
        /// caused the adjustment. Only relevant for refund-related state
        /// transitions.
        /// </summary>
        [JsonProperty("refund_id", NullValueHandling = NullValueHandling.Ignore)]
        public string RefundId { get; }

        /// <summary>
        /// The read-only Square ID of the purchase order that caused the
        /// adjustment. Only relevant for state transitions from the Square for Retail
        /// app.
        /// </summary>
        [JsonProperty("purchase_order_id", NullValueHandling = NullValueHandling.Ignore)]
        public string PurchaseOrderId { get; }

        /// <summary>
        /// The read-only Square ID of the Square goods receipt that caused the
        /// adjustment. Only relevant for state transitions from the Square for Retail
        /// app.
        /// </summary>
        [JsonProperty("goods_receipt_id", NullValueHandling = NullValueHandling.Ignore)]
        public string GoodsReceiptId { get; }

        public Builder ToBuilder()
        {
            var builder = new Builder()
                .Id(Id)
                .ReferenceId(ReferenceId)
                .FromState(FromState)
                .ToState(ToState)
                .LocationId(LocationId)
                .CatalogObjectId(CatalogObjectId)
                .CatalogObjectType(CatalogObjectType)
                .Quantity(Quantity)
                .TotalPriceMoney(TotalPriceMoney)
                .OccurredAt(OccurredAt)
                .CreatedAt(CreatedAt)
                .Source(Source)
                .EmployeeId(EmployeeId)
                .TransactionId(TransactionId)
                .RefundId(RefundId)
                .PurchaseOrderId(PurchaseOrderId)
                .GoodsReceiptId(GoodsReceiptId);
            return builder;
        }

        public class Builder
        {
            private string id;
            private string referenceId;
            private string fromState;
            private string toState;
            private string locationId;
            private string catalogObjectId;
            private string catalogObjectType;
            private string quantity;
            private Models.Money totalPriceMoney;
            private string occurredAt;
            private string createdAt;
            private Models.SourceApplication source;
            private string employeeId;
            private string transactionId;
            private string refundId;
            private string purchaseOrderId;
            private string goodsReceiptId;



            public Builder Id(string id)
            {
                this.id = id;
                return this;
            }

            public Builder ReferenceId(string referenceId)
            {
                this.referenceId = referenceId;
                return this;
            }

            public Builder FromState(string fromState)
            {
                this.fromState = fromState;
                return this;
            }

            public Builder ToState(string toState)
            {
                this.toState = toState;
                return this;
            }

            public Builder LocationId(string locationId)
            {
                this.locationId = locationId;
                return this;
            }

            public Builder CatalogObjectId(string catalogObjectId)
            {
                this.catalogObjectId = catalogObjectId;
                return this;
            }

            public Builder CatalogObjectType(string catalogObjectType)
            {
                this.catalogObjectType = catalogObjectType;
                return this;
            }

            public Builder Quantity(string quantity)
            {
                this.quantity = quantity;
                return this;
            }

            public Builder TotalPriceMoney(Models.Money totalPriceMoney)
            {
                this.totalPriceMoney = totalPriceMoney;
                return this;
            }

            public Builder OccurredAt(string occurredAt)
            {
                this.occurredAt = occurredAt;
                return this;
            }

            public Builder CreatedAt(string createdAt)
            {
                this.createdAt = createdAt;
                return this;
            }

            public Builder Source(Models.SourceApplication source)
            {
                this.source = source;
                return this;
            }

            public Builder EmployeeId(string employeeId)
            {
                this.employeeId = employeeId;
                return this;
            }

            public Builder TransactionId(string transactionId)
            {
                this.transactionId = transactionId;
                return this;
            }

            public Builder RefundId(string refundId)
            {
                this.refundId = refundId;
                return this;
            }

            public Builder PurchaseOrderId(string purchaseOrderId)
            {
                this.purchaseOrderId = purchaseOrderId;
                return this;
            }

            public Builder GoodsReceiptId(string goodsReceiptId)
            {
                this.goodsReceiptId = goodsReceiptId;
                return this;
            }

            public InventoryAdjustment Build()
            {
                return new InventoryAdjustment(id,
                    referenceId,
                    fromState,
                    toState,
                    locationId,
                    catalogObjectId,
                    catalogObjectType,
                    quantity,
                    totalPriceMoney,
                    occurredAt,
                    createdAt,
                    source,
                    employeeId,
                    transactionId,
                    refundId,
                    purchaseOrderId,
                    goodsReceiptId);
            }
        }
    }
}