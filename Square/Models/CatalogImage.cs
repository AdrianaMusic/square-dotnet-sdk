
using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Square;
using Square.Utilities;

namespace Square.Models
{
    public class CatalogImage 
    {
        public CatalogImage(string name = null,
            string url = null,
            string caption = null)
        {
            Name = name;
            Url = url;
            Caption = caption;
        }

        /// <summary>
        /// The internal name to identify this image in calls to the Square API.
        /// </summary>
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; }

        /// <summary>
        /// The URL of this image, generated by Square after an image is uploaded
        /// using the [CreateCatalogImage](#endpoint-Catalog-CreateCatalogImage) endpoint.
        /// </summary>
        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public string Url { get; }

        /// <summary>
        /// A caption that describes what is shown in the image. Displayed in the
        /// Square Online Store. This is a searchable attribute for use in applicable query filters.
        /// </summary>
        [JsonProperty("caption", NullValueHandling = NullValueHandling.Ignore)]
        public string Caption { get; }

        public override string ToString()
        {
            var toStringOutput = new List<string>();

            this.ToString(toStringOutput);

            return $"CatalogImage : ({string.Join(", ", toStringOutput)})";
        }

        protected void ToString(List<string> toStringOutput)
        {
            toStringOutput.Add($"Name = {(Name == null ? "null" : Name == string.Empty ? "" : Name)}");
            toStringOutput.Add($"Url = {(Url == null ? "null" : Url == string.Empty ? "" : Url)}");
            toStringOutput.Add($"Caption = {(Caption == null ? "null" : Caption == string.Empty ? "" : Caption)}");
        }

        public override bool Equals(object obj)
        {
            if (obj == null)
            {
                return false;
            }

            if (obj == this)
            {
                return true;
            }

            return obj is CatalogImage other &&
                ((Name == null && other.Name == null) || (Name?.Equals(other.Name) == true)) &&
                ((Url == null && other.Url == null) || (Url?.Equals(other.Url) == true)) &&
                ((Caption == null && other.Caption == null) || (Caption?.Equals(other.Caption) == true));
        }

        public override int GetHashCode()
        {
            int hashCode = -261675541;

            if (Name != null)
            {
               hashCode += Name.GetHashCode();
            }

            if (Url != null)
            {
               hashCode += Url.GetHashCode();
            }

            if (Caption != null)
            {
               hashCode += Caption.GetHashCode();
            }

            return hashCode;
        }

        public Builder ToBuilder()
        {
            var builder = new Builder()
                .Name(Name)
                .Url(Url)
                .Caption(Caption);
            return builder;
        }

        public class Builder
        {
            private string name;
            private string url;
            private string caption;



            public Builder Name(string name)
            {
                this.name = name;
                return this;
            }

            public Builder Url(string url)
            {
                this.url = url;
                return this;
            }

            public Builder Caption(string caption)
            {
                this.caption = caption;
                return this;
            }

            public CatalogImage Build()
            {
                return new CatalogImage(name,
                    url,
                    caption);
            }
        }
    }
}