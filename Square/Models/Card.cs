
using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Square;
using Square.Utilities;

namespace Square.Models
{
    public class Card 
    {
        public Card(string id = null,
            string cardBrand = null,
            string last4 = null,
            long? expMonth = null,
            long? expYear = null,
            string cardholderName = null,
            Models.Address billingAddress = null,
            string fingerprint = null,
            string cardType = null,
            string prepaidType = null,
            string bin = null)
        {
            Id = id;
            CardBrand = cardBrand;
            Last4 = last4;
            ExpMonth = expMonth;
            ExpYear = expYear;
            CardholderName = cardholderName;
            BillingAddress = billingAddress;
            Fingerprint = fingerprint;
            CardType = cardType;
            PrepaidType = prepaidType;
            Bin = bin;
        }

        /// <summary>
        /// Unique ID for this card. Generated by Square.
        /// </summary>
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; }

        /// <summary>
        /// Indicates a card's brand, such as `VISA` or `MASTERCARD`.
        /// </summary>
        [JsonProperty("card_brand", NullValueHandling = NullValueHandling.Ignore)]
        public string CardBrand { get; }

        /// <summary>
        /// The last 4 digits of the card number.
        /// </summary>
        [JsonProperty("last_4", NullValueHandling = NullValueHandling.Ignore)]
        public string Last4 { get; }

        /// <summary>
        /// The expiration month of the associated card as an integer between 1 and 12.
        /// </summary>
        [JsonProperty("exp_month", NullValueHandling = NullValueHandling.Ignore)]
        public long? ExpMonth { get; }

        /// <summary>
        /// The four-digit year of the card's expiration date.
        /// </summary>
        [JsonProperty("exp_year", NullValueHandling = NullValueHandling.Ignore)]
        public long? ExpYear { get; }

        /// <summary>
        /// The name of the cardholder.
        /// </summary>
        [JsonProperty("cardholder_name", NullValueHandling = NullValueHandling.Ignore)]
        public string CardholderName { get; }

        /// <summary>
        /// Represents a physical address.
        /// </summary>
        [JsonProperty("billing_address", NullValueHandling = NullValueHandling.Ignore)]
        public Models.Address BillingAddress { get; }

        /// <summary>
        /// __Not currently set.__ Intended as a Square-assigned identifier, based
        /// on the card number, to identify the card across multiple locations within a
        /// single application.
        /// </summary>
        [JsonProperty("fingerprint", NullValueHandling = NullValueHandling.Ignore)]
        public string Fingerprint { get; }

        /// <summary>
        /// Indicates a card's type, such as `CREDIT` or `DEBIT`.
        /// </summary>
        [JsonProperty("card_type", NullValueHandling = NullValueHandling.Ignore)]
        public string CardType { get; }

        /// <summary>
        /// Indicates a card's prepaid type, such as `NOT_PREPAID` or `PREPAID`.
        /// </summary>
        [JsonProperty("prepaid_type", NullValueHandling = NullValueHandling.Ignore)]
        public string PrepaidType { get; }

        /// <summary>
        /// The first six digits of the card number, known as the Bank Identification Number (BIN). Only the Payments API
        /// returns this field.
        /// </summary>
        [JsonProperty("bin", NullValueHandling = NullValueHandling.Ignore)]
        public string Bin { get; }

        public override string ToString()
        {
            var toStringOutput = new List<string>();

            this.ToString(toStringOutput);

            return $"Card : ({string.Join(", ", toStringOutput)})";
        }

        protected void ToString(List<string> toStringOutput)
        {
            toStringOutput.Add($"Id = {(Id == null ? "null" : Id == string.Empty ? "" : Id)}");
            toStringOutput.Add($"CardBrand = {(CardBrand == null ? "null" : CardBrand.ToString())}");
            toStringOutput.Add($"Last4 = {(Last4 == null ? "null" : Last4 == string.Empty ? "" : Last4)}");
            toStringOutput.Add($"ExpMonth = {(ExpMonth == null ? "null" : ExpMonth.ToString())}");
            toStringOutput.Add($"ExpYear = {(ExpYear == null ? "null" : ExpYear.ToString())}");
            toStringOutput.Add($"CardholderName = {(CardholderName == null ? "null" : CardholderName == string.Empty ? "" : CardholderName)}");
            toStringOutput.Add($"BillingAddress = {(BillingAddress == null ? "null" : BillingAddress.ToString())}");
            toStringOutput.Add($"Fingerprint = {(Fingerprint == null ? "null" : Fingerprint == string.Empty ? "" : Fingerprint)}");
            toStringOutput.Add($"CardType = {(CardType == null ? "null" : CardType.ToString())}");
            toStringOutput.Add($"PrepaidType = {(PrepaidType == null ? "null" : PrepaidType.ToString())}");
            toStringOutput.Add($"Bin = {(Bin == null ? "null" : Bin == string.Empty ? "" : Bin)}");
        }

        public override bool Equals(object obj)
        {
            if (obj == null)
            {
                return false;
            }

            if (obj == this)
            {
                return true;
            }

            return obj is Card other &&
                ((Id == null && other.Id == null) || (Id?.Equals(other.Id) == true)) &&
                ((CardBrand == null && other.CardBrand == null) || (CardBrand?.Equals(other.CardBrand) == true)) &&
                ((Last4 == null && other.Last4 == null) || (Last4?.Equals(other.Last4) == true)) &&
                ((ExpMonth == null && other.ExpMonth == null) || (ExpMonth?.Equals(other.ExpMonth) == true)) &&
                ((ExpYear == null && other.ExpYear == null) || (ExpYear?.Equals(other.ExpYear) == true)) &&
                ((CardholderName == null && other.CardholderName == null) || (CardholderName?.Equals(other.CardholderName) == true)) &&
                ((BillingAddress == null && other.BillingAddress == null) || (BillingAddress?.Equals(other.BillingAddress) == true)) &&
                ((Fingerprint == null && other.Fingerprint == null) || (Fingerprint?.Equals(other.Fingerprint) == true)) &&
                ((CardType == null && other.CardType == null) || (CardType?.Equals(other.CardType) == true)) &&
                ((PrepaidType == null && other.PrepaidType == null) || (PrepaidType?.Equals(other.PrepaidType) == true)) &&
                ((Bin == null && other.Bin == null) || (Bin?.Equals(other.Bin) == true));
        }

        public override int GetHashCode()
        {
            int hashCode = 1370361237;

            if (Id != null)
            {
               hashCode += Id.GetHashCode();
            }

            if (CardBrand != null)
            {
               hashCode += CardBrand.GetHashCode();
            }

            if (Last4 != null)
            {
               hashCode += Last4.GetHashCode();
            }

            if (ExpMonth != null)
            {
               hashCode += ExpMonth.GetHashCode();
            }

            if (ExpYear != null)
            {
               hashCode += ExpYear.GetHashCode();
            }

            if (CardholderName != null)
            {
               hashCode += CardholderName.GetHashCode();
            }

            if (BillingAddress != null)
            {
               hashCode += BillingAddress.GetHashCode();
            }

            if (Fingerprint != null)
            {
               hashCode += Fingerprint.GetHashCode();
            }

            if (CardType != null)
            {
               hashCode += CardType.GetHashCode();
            }

            if (PrepaidType != null)
            {
               hashCode += PrepaidType.GetHashCode();
            }

            if (Bin != null)
            {
               hashCode += Bin.GetHashCode();
            }

            return hashCode;
        }

        public Builder ToBuilder()
        {
            var builder = new Builder()
                .Id(Id)
                .CardBrand(CardBrand)
                .Last4(Last4)
                .ExpMonth(ExpMonth)
                .ExpYear(ExpYear)
                .CardholderName(CardholderName)
                .BillingAddress(BillingAddress)
                .Fingerprint(Fingerprint)
                .CardType(CardType)
                .PrepaidType(PrepaidType)
                .Bin(Bin);
            return builder;
        }

        public class Builder
        {
            private string id;
            private string cardBrand;
            private string last4;
            private long? expMonth;
            private long? expYear;
            private string cardholderName;
            private Models.Address billingAddress;
            private string fingerprint;
            private string cardType;
            private string prepaidType;
            private string bin;



            public Builder Id(string id)
            {
                this.id = id;
                return this;
            }

            public Builder CardBrand(string cardBrand)
            {
                this.cardBrand = cardBrand;
                return this;
            }

            public Builder Last4(string last4)
            {
                this.last4 = last4;
                return this;
            }

            public Builder ExpMonth(long? expMonth)
            {
                this.expMonth = expMonth;
                return this;
            }

            public Builder ExpYear(long? expYear)
            {
                this.expYear = expYear;
                return this;
            }

            public Builder CardholderName(string cardholderName)
            {
                this.cardholderName = cardholderName;
                return this;
            }

            public Builder BillingAddress(Models.Address billingAddress)
            {
                this.billingAddress = billingAddress;
                return this;
            }

            public Builder Fingerprint(string fingerprint)
            {
                this.fingerprint = fingerprint;
                return this;
            }

            public Builder CardType(string cardType)
            {
                this.cardType = cardType;
                return this;
            }

            public Builder PrepaidType(string prepaidType)
            {
                this.prepaidType = prepaidType;
                return this;
            }

            public Builder Bin(string bin)
            {
                this.bin = bin;
                return this;
            }

            public Card Build()
            {
                return new Card(id,
                    cardBrand,
                    last4,
                    expMonth,
                    expYear,
                    cardholderName,
                    billingAddress,
                    fingerprint,
                    cardType,
                    prepaidType,
                    bin);
            }
        }
    }
}