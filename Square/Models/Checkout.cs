using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Square;
using Square.Utilities;

namespace Square.Models
{
    public class Checkout 
    {
        public Checkout(string id = null,
            string checkoutPageUrl = null,
            bool? askForShippingAddress = null,
            string merchantSupportEmail = null,
            string prePopulateBuyerEmail = null,
            Models.Address prePopulateShippingAddress = null,
            string redirectUrl = null,
            Models.Order order = null,
            string createdAt = null,
            IList<Models.AdditionalRecipient> additionalRecipients = null)
        {
            Id = id;
            CheckoutPageUrl = checkoutPageUrl;
            AskForShippingAddress = askForShippingAddress;
            MerchantSupportEmail = merchantSupportEmail;
            PrePopulateBuyerEmail = prePopulateBuyerEmail;
            PrePopulateShippingAddress = prePopulateShippingAddress;
            RedirectUrl = redirectUrl;
            Order = order;
            CreatedAt = createdAt;
            AdditionalRecipients = additionalRecipients;
        }

        /// <summary>
        /// ID generated by Square Checkout when a new checkout is requested.
        /// </summary>
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; }

        /// <summary>
        /// The URL that the buyer's browser should be redirected to after the
        /// checkout is completed.
        /// </summary>
        [JsonProperty("checkout_page_url", NullValueHandling = NullValueHandling.Ignore)]
        public string CheckoutPageUrl { get; }

        /// <summary>
        /// If `true`, Square Checkout will collect shipping information on your
        /// behalf and store that information with the transaction information in your
        /// Square Dashboard.
        /// Default: `false`.
        /// </summary>
        [JsonProperty("ask_for_shipping_address", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AskForShippingAddress { get; }

        /// <summary>
        /// The email address to display on the Square Checkout confirmation page
        /// and confirmation email that the buyer can use to contact the merchant.
        /// If this value is not set, the confirmation page and email will display the
        /// primary email address associated with the merchant's Square account.
        /// Default: none; only exists if explicitly set.
        /// </summary>
        [JsonProperty("merchant_support_email", NullValueHandling = NullValueHandling.Ignore)]
        public string MerchantSupportEmail { get; }

        /// <summary>
        /// If provided, the buyer's email is pre-populated on the checkout page
        /// as an editable text field.
        /// Default: none; only exists if explicitly set.
        /// </summary>
        [JsonProperty("pre_populate_buyer_email", NullValueHandling = NullValueHandling.Ignore)]
        public string PrePopulateBuyerEmail { get; }

        /// <summary>
        /// Represents a physical address.
        /// </summary>
        [JsonProperty("pre_populate_shipping_address", NullValueHandling = NullValueHandling.Ignore)]
        public Models.Address PrePopulateShippingAddress { get; }

        /// <summary>
        /// The URL to redirect to after checkout is completed with `checkoutId`,
        /// Square's `orderId`, `transactionId`, and `referenceId` appended as URL
        /// parameters. For example, if the provided redirect_url is
        /// `http://www.example.com/order-complete`, a successful transaction redirects
        /// the customer to:
        /// `http://www.example.com/order-complete?checkoutId=xxxxxx&orderId=xxxxxx&referenceId=xxxxxx&transactionId=xxxxxx`
        /// If you do not provide a redirect URL, Square Checkout will display an order
        /// confirmation page on your behalf; however Square strongly recommends that
        /// you provide a redirect URL so you can verify the transaction results and
        /// finalize the order through your existing/normal confirmation workflow.
        /// </summary>
        [JsonProperty("redirect_url", NullValueHandling = NullValueHandling.Ignore)]
        public string RedirectUrl { get; }

        /// <summary>
        /// Contains all information related to a single order to process with Square,
        /// including line items that specify the products to purchase. Order objects also
        /// include information on any associated tenders, refunds, and returns.
        /// All Connect V2 Transactions have all been converted to Orders including all associated
        /// itemization data.
        /// </summary>
        [JsonProperty("order", NullValueHandling = NullValueHandling.Ignore)]
        public Models.Order Order { get; }

        /// <summary>
        /// The time when the checkout was created, in RFC 3339 format.
        /// </summary>
        [JsonProperty("created_at", NullValueHandling = NullValueHandling.Ignore)]
        public string CreatedAt { get; }

        /// <summary>
        /// Additional recipients (other than the merchant) receiving a portion of this checkout.
        /// For example, fees assessed on the purchase by a third party integration.
        /// </summary>
        [JsonProperty("additional_recipients", NullValueHandling = NullValueHandling.Ignore)]
        public IList<Models.AdditionalRecipient> AdditionalRecipients { get; }

        public Builder ToBuilder()
        {
            var builder = new Builder()
                .Id(Id)
                .CheckoutPageUrl(CheckoutPageUrl)
                .AskForShippingAddress(AskForShippingAddress)
                .MerchantSupportEmail(MerchantSupportEmail)
                .PrePopulateBuyerEmail(PrePopulateBuyerEmail)
                .PrePopulateShippingAddress(PrePopulateShippingAddress)
                .RedirectUrl(RedirectUrl)
                .Order(Order)
                .CreatedAt(CreatedAt)
                .AdditionalRecipients(AdditionalRecipients);
            return builder;
        }

        public class Builder
        {
            private string id;
            private string checkoutPageUrl;
            private bool? askForShippingAddress;
            private string merchantSupportEmail;
            private string prePopulateBuyerEmail;
            private Models.Address prePopulateShippingAddress;
            private string redirectUrl;
            private Models.Order order;
            private string createdAt;
            private IList<Models.AdditionalRecipient> additionalRecipients;



            public Builder Id(string id)
            {
                this.id = id;
                return this;
            }

            public Builder CheckoutPageUrl(string checkoutPageUrl)
            {
                this.checkoutPageUrl = checkoutPageUrl;
                return this;
            }

            public Builder AskForShippingAddress(bool? askForShippingAddress)
            {
                this.askForShippingAddress = askForShippingAddress;
                return this;
            }

            public Builder MerchantSupportEmail(string merchantSupportEmail)
            {
                this.merchantSupportEmail = merchantSupportEmail;
                return this;
            }

            public Builder PrePopulateBuyerEmail(string prePopulateBuyerEmail)
            {
                this.prePopulateBuyerEmail = prePopulateBuyerEmail;
                return this;
            }

            public Builder PrePopulateShippingAddress(Models.Address prePopulateShippingAddress)
            {
                this.prePopulateShippingAddress = prePopulateShippingAddress;
                return this;
            }

            public Builder RedirectUrl(string redirectUrl)
            {
                this.redirectUrl = redirectUrl;
                return this;
            }

            public Builder Order(Models.Order order)
            {
                this.order = order;
                return this;
            }

            public Builder CreatedAt(string createdAt)
            {
                this.createdAt = createdAt;
                return this;
            }

            public Builder AdditionalRecipients(IList<Models.AdditionalRecipient> additionalRecipients)
            {
                this.additionalRecipients = additionalRecipients;
                return this;
            }

            public Checkout Build()
            {
                return new Checkout(id,
                    checkoutPageUrl,
                    askForShippingAddress,
                    merchantSupportEmail,
                    prePopulateBuyerEmail,
                    prePopulateShippingAddress,
                    redirectUrl,
                    order,
                    createdAt,
                    additionalRecipients);
            }
        }
    }
}